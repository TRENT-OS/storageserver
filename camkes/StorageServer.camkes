/*
 * Copyright (C) 2020, Hensoldt Cyber GmbH
 */

/*
 *  StorageServer CAmkES Component
 *
 *  to be used as:
 *
 *      #include "StorageServer/camkes/StorageServer.camkes"
 *
 *      StorageServer_COMPONENT_DEFINE(StorageServer_1)
 *      StorageServer_COMPONENT_DEFINE(StorageServer_2)
 *
 */

#pragma once

import <if_OS_Storage.camkes>;

#include "LibMacros/ForEach.h"


//------------------------------------------------------------------------------


struct StorageServer_ClientConfig {
    int64_t size;
    int64_t offset;
}


struct StorageServer_Config {
    StorageServer_ClientConfig clients[];
}


/*
 * Declare the StorageServer with a given type name:
 *
 *      StorageServer_COMPONENT_DEFINE(
 *          <name>
 *      )
 */
#define StorageServer_COMPONENT_DEFINE( \
    _name_) \
    \
    component _name_ { \
        uses                if_OS_Storage     storage_rpc; \
        dataport            Buf               storage_port; \
        provides            if_OS_Storage     storageServer_rpc; \
        maybe dataport      Buf               storageServer1_port; \
        maybe dataport      Buf               storageServer2_port; \
        maybe dataport      Buf               storageServer3_port; \
        maybe dataport      Buf               storageServer4_port; \
        maybe dataport      Buf               storageServer5_port; \
        maybe dataport      Buf               storageServer6_port; \
        maybe dataport      Buf               storageServer7_port; \
        maybe dataport      Buf               storageServer8_port; \
        attribute   StorageServer_Config      storageServer_config;  \
    }


//------------------------------------------------------------------------------


/*
 * Assign all the non-client interfaces:
 *
 *      StorageServer_INSTANCE_CONNECT(
 *          <instance>,
 *          <storage>.<rpc>, <storage>.<port>
 *      )
  */
#define StorageServer_INSTANCE_CONNECT( \
    _inst_, \
    _rpc_, \
    _port_) \
    \
    connection  seL4RPCCall \
        _inst_ ## _rpc( \
            from    _inst_.storage_rpc, \
            to      _rpc_ \
        ); \
    connection seL4SharedData \
        _inst_ ## _port( \
            from    _inst_.storage_port, \
            to      _port_ \
        );


//------------------------------------------------------------------------------


// Set a single connection; this is used internally
#define StorageServer_CLIENT_CONNECTOR( \
    _inst_, \
    _unused_, \
    _rpc_, \
    _port_, \
    _num_) \
    \
    connection  seL4RPCCall \
        _inst_ ## _rpc ## _num_( \
            from    _rpc_, \
            to      _inst_.storageServer_rpc \
        ); \
    connection seL4SharedData \
        _inst_ ## _port ## _num_( \
            from    _port_, \
            to      _inst_.storageServer ## _num_ ## _port \
        );


/*
 * Assign all clients via this variadic macro:
 *
 *      StorageServer_INSTANCE_CONNECT_CLIENTS(
 *          <instance>,
 *          <client0>.<rpc>,  <client0>.<port>,
 *          <client1>.<rpc>,  <client1>.<port>
 *          ...
 *      )
 *
 */
#define StorageServer_INSTANCE_CONNECT_CLIENTS( \
    _inst_, \
    ...) \
    \
    FOR_EACH_2P(StorageServer_CLIENT_CONNECTOR,_inst_,UNUSED,__VA_ARGS__)


//------------------------------------------------------------------------------


// Configure a single client instance
#define StorageServer_INSTANCE_CONFIGURATOR( \
    _unused0, \
    _unused1_, \
    _offset_, \
    _size_, \
    _unused2_) \
    \
    { \
        "offset": _offset_, \
        "size":   _size_, \
    },


/*
 * Configure all clients connected to a StorageServer instance:
 *
 *      StorageServer_INSTANCE_CONNECT_CLIENTS(
 *          <instance>,
 *          <offset0>, <size0>,
 *          <offset1>, <size1>
 *          ...
 *      )
 *
 * If multiple clients are given, their respective address ranges are
 * mapped based on their sizes and offsets.
 *
 * Please note that we use absolute addressing here, so address ranges can
 * overlap (as is shown in the example above, where client 1 and client 2 have
 * 1024 bytes of overlap)!!
 */
#define StorageServer_INSTANCE_CONFIGURE_CLIENTS( \
    _inst_, \
    ...) \
    \
    _inst_.storageServer_config = { \
        "clients": [ \
            FOR_EACH_2P(StorageServer_INSTANCE_CONFIGURATOR, \
                        UNUSED,UNUSED,__VA_ARGS__) \
        ] \
    };


//------------------------------------------------------------------------------


// Assign a single badge; this is used internally
#define StorageServer_BADGE_ASSIGNER( \
    _unused0_, \
    _unused1_, \
    _rpc_, \
    _num_) \
    \
    _rpc_ ## _attributes = (100 + _num_);


/*
 * Assign all clients a badge, in the order in which they are connected to the
 * StorageServer instance via StorageServer_INSTANCE_CONNECT_CLIENTS():
 *
 *      StorageServer_CLIENT_ASSIGN_BADGE(
 *          <client_rpc>, <ID>
 *      )
 *
 * NOTE: IDs need to start at 101!
 *
 */
#define StorageServer_CLIENT_ASSIGN_BADGE( \
    _client_rpc_, \
    _val_) \
    \
    _client_rpc_ ## _attributes = _val_;


/*
 * Assign badges to a list of clients; badge IDs will start at 101 and then be
 * incremented. Make sure to pass clients in same order as they are passed
 * in the StorageServer_INSTANCE_CONNECT_CLIENTS() macro:
 *
 *      StorageServer_CLIENT_ASSIGN_BADGES(
 *          <client0_rpc>,
 *          <client1_rpc>,
 *           ...
 *      )
 *
 * NOTE: Can take up to 8 clients.
 *
 */
#define StorageServer_CLIENT_ASSIGN_BADGES( \
    ...) \
    \
    FOR_EACH_1P(StorageServer_BADGE_ASSIGNER,UNUSED,UNUSED,__VA_ARGS__)
